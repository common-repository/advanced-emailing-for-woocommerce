rndefine("#RNEmailConditionDesigner",["lit","#RNEmailCore/LitElementBase","lit/decorators","lit/directives/repeat.js","#RNEmailCore/StoreBase","#RNEmailLit/Lit","#RNEmailCore/Sanitizer","lit-html/directives/live.js","#RNEmailDialog/Dialog"],(function(t,e,i,n,o,s,a,l,r){"use strict";var d,p,u,h,C,c,m,y,b,I,g,L,$,N,O,E,f;let T,G,v;!function(t){t.Equal="Equal",t.NotEqual="NotEqual",t.IsEmpty="IsEmpty",t.IsNotEmpty="IsNotEmpty",t.None="None",t.Contains="Contains",t.NotContains="NotContains",t.ChangedTo="ChangedTo",t.ChangedFrom="ChangedFrom",t.GreaterThan="GreaterThan",t.GreaterOrEqualThan="GreaterOrEqualThan",t.LessThan="LessThan",t.LessOrEqualThan="LessOrEqualThan",t.IsChecked="IsChecked",t.IsNotChecked="IsNotChecked",t.WasClicked="WasClicked",t.IsGuest="IsGuest",t.IsNotGuest="IsNotGuest",t.ViewingPage="ViewingPage",t.Is="Is",t.IsNot="IsNot",t.IsPartOfRole="IsPartOfRole",t.IsNotPartOfRole="IsNotPartOfRole"}(T||(T={})),function(t){t.Standard="Standard",t.Text="Text",t.MultipleValues="MultipleValues",t.Composed="Composed",t.Date="Date",t.Numeric="Numeric",t.Checkbox="Checkbox",t.Button="Button",t.Status="Status",t.Role="Role",t.Survey="Survey",t.List="List",t.CustomField="CustomField"}(G||(G={})),function(t){t.Variation="Variation",t.None="None",t.Entry="Entry",t.Field="Field",t.CustomField="CustomField"}(v||(v={}));class x{static GetValue(t,e){if(t.SubType==G.MultipleValues)return""!=e&&Array.isArray(e)?e:[]}}let S,V=(d=o.StoreDataType(Object),p=o.StoreAutoIncrement("ConditionLineOptions"),u=class extends o.StoreBase{constructor(...t){super(...t),babelHelpers.initializerDefineProperty(this,"Value",h,this),babelHelpers.initializerDefineProperty(this,"Id",C,this)}LoadDefaultValues(){this.Id=0,this.FieldId="",this.Comparison=T.None,this.Value="",this.Type=v.None,this.SubType=G.Standard,this.ValueSubType="",this.PathId=""}GetValueFromLoader(t,e){return"Value"===t?x.GetValue(this,e):null}},h=babelHelpers.applyDecoratedDescriptor(u.prototype,"Value",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),C=babelHelpers.applyDecoratedDescriptor(u.prototype,"Id",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),u),D=(c=o.StoreAutoIncrement("ConditionGroupOptions"),m=o.StoreDataType(V),y=class extends o.StoreBase{constructor(...t){super(...t),babelHelpers.initializerDefineProperty(this,"Id",b,this),babelHelpers.initializerDefineProperty(this,"ConditionLines",I,this)}LoadDefaultValues(){this.ConditionLines=[],this.Id=0}},b=babelHelpers.applyDecoratedDescriptor(y.prototype,"Id",[c],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),I=babelHelpers.applyDecoratedDescriptor(y.prototype,"ConditionLines",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),y);!function(t){t.Field="Field"}(S||(S={}));class F extends o.StoreBase{LoadDefaultValues(){this.Type=S.Field,this.Id=""}}let R=(g=o.StoreAutoIncrement("ConditionOptionsBase"),L=o.StoreDataType(D),$=o.StoreDataType(F),N=class extends o.StoreBase{constructor(...t){super(...t),babelHelpers.initializerDefineProperty(this,"Id",O,this),babelHelpers.initializerDefineProperty(this,"ConditionGroups",E,this),babelHelpers.initializerDefineProperty(this,"ElementsUsed",f,this)}LoadDefaultValues(){this.Id=0,this.Type="ShowHide",this.ElementsUsed=[],this.ConditionGroups=[]}},O=babelHelpers.applyDecoratedDescriptor(N.prototype,"Id",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),E=babelHelpers.applyDecoratedDescriptor(N.prototype,"ConditionGroups",[L],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),f=babelHelpers.applyDecoratedDescriptor(N.prototype,"ElementsUsed",[$],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),N);var w;i.customElement("rn-condition-builder")(class extends e.LitElementBase{static get properties(){return{}}render(){return t.html` <div> ${n.repeat(this.Condition.ConditionGroups,(t=>t.Id),((e,i)=>t.html` <div style="margin-bottom: 10px"> <rn-condition-group .model="${this.model}" @fieldchanged=${()=>this.RecalculateElementsUsed()} @removegroup=${t=>this.RemoveGroup(t.detail)} .ConditionBuilder=${this} .ConditionGroup=${e} .AdditionalConditions=${this.AdditionalConditions}></rn-condition-group> ${i<this.Condition.ConditionGroups.length-1?t.html`<span style="font-weight: bold;">${RNTranslate("or")}</span>`:""} </div> `))} <div style="margin-top: 10px;"> <div style="margin-top: 10px;"> <button style="margin-left: 2px" @click=${t=>{t.preventDefault(),this.CreateGroup()}} class='rnbtn rnbtn-primary'>${RNTranslate("Add new group")}</button> </div> </div> </div> `}RemoveGroup(t){let e=this.Condition.ConditionGroups.indexOf(t);e<0||(this.Condition.ConditionGroups.splice(e,1),0==this.Condition.ConditionGroups.length&&this.FireEvent("AllGroupsRemoved",!0),this.RecalculateElementsUsed(),this.forceUpdate())}CreateGroup(){this.Condition.ConditionGroups.push((new D).Merge({ConditionLines:[{}]})),this.forceUpdate()}RecalculateElementsUsed(){this.Condition.ElementsUsed=[];for(let t of this.Condition.ConditionGroups)for(let e of t.ConditionLines)e.Type==v.Field&&this.Condition.ElementsUsed.push((new F).Merge({Type:S.Field,Id:e.FieldId}))}});let q=i.customElement("rn-condition-group")(w=class extends e.LitElementBase{constructor(...t){super(...t),this.AdditionalConditions=[]}static get properties(){return{}}render(){return t.html` <table class='rnConditionGroup' style="margin-bottom: 10px;table-layout: fixed;width: 100%;"> <tbody> ${n.repeat(this.ConditionGroup.ConditionLines,(t=>t.Id),((e,i)=>t.html` <rn-condition-line .model=${this.model} .AdditionalConditions=${this.AdditionalConditions} @removeline=${t=>this.RemoveLine(t.detail)} @addline=${t=>this.AddLineBellow(t.detail)} .ConditionGroup=${this} .ConditionLineOptions=${e}></rn-condition-line> `))} </tbody> </table> `}RemoveLine(t){let e=this.ConditionGroup.ConditionLines.indexOf(t);e<0||(this.ConditionGroup.ConditionLines.splice(e,1),0!=this.ConditionGroup.ConditionLines.length?(this.FireEvent("fieldchanged"),this.forceUpdate()):this.FireEvent("removegroup",this.ConditionGroup))}AddLineBellow(t){let e=this.ConditionGroup.ConditionLines.indexOf(t);e<0||(this.ConditionGroup.ConditionLines.splice(e+1,0,(new V).Merge()),this.FireEvent("fieldchanged"),this.forceUpdate())}})||w;var z,B,P,H,A,k,U,M,_,j,W,J,K,Q,X,Y,Z,tt={};!function(t){Object.defineProperty(t,"__esModule",{value:!0});var e="times",i=[],n="f00d",o="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z";t.definition={prefix:"fas",iconName:e,icon:[352,512,i,n,o]},t.faTimes=t.definition,t.prefix="fas",t.iconName=e,t.width=352,t.height=512,t.ligatures=i,t.unicode=n,t.svgPathData=o}(tt);class et{Initialize(t,e){return this.Condition=t,this.Model=e,this.Condition.ConditionLineOptions.Comparison==T.None&&this.InitializeValues(),this}}class it extends et{GetComparator(){return t.html`<select style="width:100%;height: auto;padding: 0;" disabled/>`}GetValueInput(){return t.html`<input value="" style="width: 100%;height: 30px;" type='text' disabled/>`}InitializeValues(){}}let nt,ot,st;!function(t){t.Equal="Equal",t.NotEqual="NotEqual",t.IsEmpty="IsEmpty",t.IsNotEmpty="IsNotEmpty",t.None="None",t.Contains="Contains",t.NotContains="NotContains",t.ChangedTo="ChangedTo",t.ChangedFrom="ChangedFrom",t.GreaterThan="GreaterThan",t.GreaterOrEqualThan="GreaterOrEqualThan",t.LessThan="LessThan",t.LessOrEqualThan="LessOrEqualThan",t.IsChecked="IsChecked",t.IsNotChecked="IsNotChecked",t.WasClicked="WasClicked",t.IsGuest="IsGuest",t.IsNotGuest="IsNotGuest",t.ViewingPage="ViewingPage",t.Is="Is",t.IsNot="IsNot",t.IsPartOfRole="IsPartOfRole",t.IsNotPartOfRole="IsNotPartOfRole"}(nt||(nt={})),function(t){t.Standard="Standard",t.Text="Text",t.MultipleValues="MultipleValues",t.Composed="Composed",t.Date="Date",t.Numeric="Numeric",t.Checkbox="Checkbox",t.Button="Button",t.Status="Status",t.Role="Role",t.Survey="Survey",t.List="List",t.CustomField="CustomField"}(ot||(ot={})),function(t){t.Variation="Variation",t.None="None",t.Entry="Entry",t.Field="Field",t.CustomField="CustomField"}(st||(st={}));class at{static GetValue(t,e){if(t.SubType==ot.MultipleValues)return""!=e&&Array.isArray(e)?e:[]}}let lt,rt=(z=o.StoreDataType(Object),B=o.StoreAutoIncrement("ConditionLineOptions"),P=class extends o.StoreBase{constructor(...t){super(...t),babelHelpers.initializerDefineProperty(this,"Value",H,this),babelHelpers.initializerDefineProperty(this,"Id",A,this)}LoadDefaultValues(){this.Id=0,this.FieldId="",this.Comparison=nt.None,this.Value="",this.Type=st.None,this.SubType=ot.Standard,this.ValueSubType="",this.PathId=""}GetValueFromLoader(t,e){return"Value"===t?at.GetValue(this,e):null}},H=babelHelpers.applyDecoratedDescriptor(P.prototype,"Value",[z],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),A=babelHelpers.applyDecoratedDescriptor(P.prototype,"Id",[B],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),P),dt=(k=o.StoreAutoIncrement("ConditionGroupOptions"),U=o.StoreDataType(rt),M=class extends o.StoreBase{constructor(...t){super(...t),babelHelpers.initializerDefineProperty(this,"Id",_,this),babelHelpers.initializerDefineProperty(this,"ConditionLines",j,this)}LoadDefaultValues(){this.ConditionLines=[],this.Id=0}},_=babelHelpers.applyDecoratedDescriptor(M.prototype,"Id",[k],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),j=babelHelpers.applyDecoratedDescriptor(M.prototype,"ConditionLines",[U],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),M);!function(t){t.Field="Field"}(lt||(lt={}));class pt extends o.StoreBase{LoadDefaultValues(){this.Type=lt.Field,this.Id=""}}W=o.StoreAutoIncrement("ConditionOptionsBase"),J=o.StoreDataType(dt),K=o.StoreDataType(pt),Q=class extends o.StoreBase{constructor(...t){super(...t),babelHelpers.initializerDefineProperty(this,"Id",X,this),babelHelpers.initializerDefineProperty(this,"ConditionGroups",Y,this),babelHelpers.initializerDefineProperty(this,"ElementsUsed",Z,this)}LoadDefaultValues(){this.Id=0,this.Type="ShowHide",this.ElementsUsed=[],this.ConditionGroups=[]}},X=babelHelpers.applyDecoratedDescriptor(Q.prototype,"Id",[W],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),Y=babelHelpers.applyDecoratedDescriptor(Q.prototype,"ConditionGroups",[J],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),Z=babelHelpers.applyDecoratedDescriptor(Q.prototype,"ElementsUsed",[K],{configurable:!0,enumerable:!0,writable:!0,initializer:null});class ut extends et{GetComparator(){return t.html` <select .value=${this.Condition.ConditionLineOptions.Comparison} @change=${t=>this.ComparisonChanged(t.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.Contains}" value=${nt.Contains}>${RNTranslate("Contains")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.NotContains}" value=${nt.NotContains}>${RNTranslate("Not Contains")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.IsEmpty}" value=${nt.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.IsNotEmpty}" value=${nt.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=nt.Contains}GetValueInput(){if(this.Condition.ConditionLineOptions.Comparison==nt.IsEmpty||this.Condition.ConditionLineOptions.Comparison==nt.IsNotEmpty)return null;let e=this.GetAvailableOptions(),i=e.filter((t=>this.Condition.ConditionLineOptions.Value.indexOf(t.Value)>=0)).map((t=>t.Value));return t.html` <rn-inputs-select style="min-height: 30px" multiple .value="${i}" @change="${t=>this.OnChange(t.detail)}" .propertyName="${"Type"}" .options="${e}" ></rn-inputs-select> `}ComparisonChanged(t){this.Condition.ConditionLineOptions.Comparison=nt[t],this.Condition.forceUpdate()}GetAvailableOptions(){let t=this.Condition.ConditionGroup.ConditionBuilder.EmailBuilder.GetFieldById(this.Condition.ConditionLineOptions.FieldId);return null!=t?t.Options:[]}OnChange(t){this.Condition.ConditionLineOptions.Value=t,this.Condition.forceUpdate()}}class ht extends et{GetComparator(){return t.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${t=>this.ComparisonChanged(t.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.Equal}" .value=${nt.Equal}>${RNTranslate("Equal To")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.NotEqual}" .value=${nt.NotEqual}>${RNTranslate("Not equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.GreaterThan}" .value=${nt.GreaterThan}>${RNTranslate("Greater than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.GreaterOrEqualThan}" .value=${nt.GreaterOrEqualThan}>${RNTranslate("Greater or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.LessThan}" .value=${nt.LessThan}>${RNTranslate("Less than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.LessOrEqualThan}" .value=${nt.LessOrEqualThan}>${RNTranslate("Less or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.IsEmpty}" .value=${nt.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.IsNotEmpty}" .value=${nt.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Value=a.Sanitizer.SanitizeNumber(this.Condition.ConditionLineOptions.Value,0)}GetValueInput(){return this.Condition.ConditionLineOptions.Comparison==nt.IsEmpty||this.Condition.ConditionLineOptions.Comparison==nt.IsNotEmpty?null:t.html` <rn-inputs-datepicker style="height: 30px;min-height: 30px;margin-bottom: 0;" .value="${this.Condition.ConditionLineOptions.Value}" @change="${t=>this.Condition.ConditionLineOptions.Value=t.detail}"></rn-inputs-datepicker> `}ComparisonChanged(t){this.Condition.ConditionLineOptions.Comparison=nt[t],this.Condition.forceUpdate()}ValueChanged(t){}GetContainer(t){document.getElementsByTagName("body")}}class Ct extends et{GetComparator(){return t.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${t=>this.ComparisonChanged(t.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.Equal}" value=${nt.Equal}>${RNTranslate("Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.NotEqual}" value=${nt.NotEqual}>${RNTranslate("Not Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.GreaterThan}" value=${nt.GreaterThan}>${RNTranslate("Greater than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.GreaterOrEqualThan}" value=${nt.GreaterOrEqualThan}>${RNTranslate("Greater or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.LessThan}" value=${nt.LessThan}>${RNTranslate("Less than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.LessOrEqualThan}" value=${nt.LessOrEqualThan}>${RNTranslate("Less or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.IsEmpty}" value=${nt.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.IsNotEmpty}" value=${nt.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=nt.Equal,this.Condition.ConditionLineOptions.Value=a.Sanitizer.SanitizeNumber(this.Condition.ConditionLineOptions.Value,"")}GetValueInput(){let e=this.Condition.ConditionLineOptions.Comparison;return t.html`<input type="number" value=${l.live(this.Condition.ConditionLineOptions.Value)} @change=${t=>this.ValueChanged(t.target.value)} style="min-width: 100%;max-width: 200px;height: 30px;width: 100%;" type='text' ?disabled=${e==nt.IsEmpty||e==nt.IsNotEmpty}/>`}ComparisonChanged(t){this.Condition.ConditionLineOptions.Comparison=nt[t],this.Condition.forceUpdate()}ValueChanged(t){this.Condition.ConditionLineOptions.Value=t,this.Condition.forceUpdate()}}class ct extends et{GetComparator(){return t.html` <select .value=${this.Condition.ConditionLineOptions.Comparison} @change=${t=>this.ComparisonChanged(t.target.value.toString())} style="height: auto;padding: 0;margin-left: 5px;width:100%;"> <option value=${T.IsChecked}>${RNTranslate("Is Checked")}</option> <option value=${T.IsNotChecked}>${RNTranslate("Is Not Checked")}</option> </select> `}GetValueInput(){return null}ComparisonChanged(t){this.Condition.ConditionLineOptions.Comparison=T[t],this.Condition.forceUpdate()}ValueChanged(t){this.Condition.ConditionLineOptions.Value=t,this.Condition.forceUpdate()}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=T.IsChecked}}class mt extends et{GetComparator(){return t.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${t=>this.ComparisonChanged(t.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.Equal}" .value=${nt.Equal}>${RNTranslate("Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.NotEqual}" .value=${nt.NotEqual}>${RNTranslate("Not Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.IsEmpty}" .value=${nt.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.IsNotEmpty}" .value=${nt.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.Contains}" .value=${nt.Contains}>${RNTranslate("Contains")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==nt.NotContains}" .value=${nt.NotContains}>${RNTranslate("Not Contains")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=nt.Equal}GetValueInput(){let e=this.Condition.ConditionLineOptions.Comparison;return t.html`<input value=${l.live(this.Condition.ConditionLineOptions.Value)} @change=${t=>this.ValueChanged(t.target.value)} style="min-width: 100%;max-width: 200px;height: 30px;width: 100%;" type='text' ?disabled=${e==nt.IsEmpty||e==nt.IsNotEmpty}/>`}ComparisonChanged(t){this.Condition.ConditionLineOptions.Comparison=nt[t],this.Condition.forceUpdate()}ValueChanged(t){this.Condition.ConditionLineOptions.Value=t,this.Condition.forceUpdate()}}class yt{static GetComparator(t,e){switch(t.ConditionLineOptions.Type){case v.None:return new it;case v.Entry:case v.Field:case v.CustomField:return t.ConditionLineOptions.SubType==G.MultipleValues?(new ut).Initialize(t,e):t.ConditionLineOptions.SubType==G.Date?(new ht).Initialize(t,e):t.ConditionLineOptions.SubType==G.Numeric?(new Ct).Initialize(t,e):t.ConditionLineOptions.SubType==G.Checkbox?(new ct).Initialize(t,e):(t.ConditionLineOptions.SubType,G.Status,(new mt).Initialize(t,e));case v.Variation:return(new ut).Initialize(t,e)}return new it}}var bt;let It=i.customElement("rn-condition-line")(bt=class extends e.LitElementBase{constructor(...t){super(...t),this.EntryGroup=[{Id:"_sequence",Label:"Entry Number",Type:ot.Numeric},{Id:"_creation_date",Label:"Creation Date",Type:ot.Date},{Id:"_submitted_by",Label:"Submitted By",Type:ot.Role}]}static get properties(){return{}}render(){let e=this.ConditionGroup.ConditionBuilder.EmailBuilder.Fields.filter((t=>t.ShouldAddInConditions)),i=yt.GetComparator(this,this.model),n=i.GetValueInput(),o=[];return e.forEach((t=>{let e=null;e=o.find((e=>e.Name==t.Group)),null==e&&(e={Name:t.Group,Priority:t.Priority,Fields:[]},o.push(e)),e.Fields.push(t)})),t.html` <tr style="display: flex;align-items: flex-start;margin-bottom: 5px;"> <td style="width: 30%"> <select .value="${l.live(this.ConditionLineOptions.FieldId+(""==this.ConditionLineOptions.PathId?"":"_"+this.ConditionLineOptions.PathId))}" style="height: 28px;padding: 0;width: 100%" @change=${t=>this.FieldChanged(t.target[t.target.selectedIndex].getAttribute("data-type").toString(),t.target[t.target.selectedIndex].getAttribute("data-field-id").toString(),t.target[t.target.selectedIndex].getAttribute("data-path-id").toString(),t.target[t.target.selectedIndex])}> <option data-linetype=${st.None.toString()} id=''>${RNTranslate("Select a field")}</option> ${o.map((e=>t.html` <optgroup label=${e.Name}> ${this.GetSelectOptions(e.Fields,0)} </optgroup> `))} </select> </td> <td style="width:${null==n?"calc(70% - 80px)":"20%"}"> ${i.GetComparator()} </td> ${s.rnIf(null!=n&&t.html` <td style="width: calc(50% - 80px)"> ${i.GetValueInput()} </td> `)} <td style="width: 80px"> <button @click=${t=>{t.preventDefault(),this.FireEvent("addline",this.ConditionLineOptions)}} class='rnbtn rnbtn-light' style="margin-left: 5px;padding: 1px 5px;">${RNTranslate("AND")}</button> <span style="line-height: 25px;vertical-align: middle;cursor: pointer;" @click=${t=>{t.preventDefault(),this.FireEvent("removeline",this.ConditionLineOptions)}} class="rnline"><rn-fontawesome .icon=${tt.faTimes} style="margin-left: 5px"/></span> </td> </tr> `}GetSelectOptions(e,i){let n=this.ConditionLineOptions.FieldId+(""==this.ConditionLineOptions.PathId?"":"_"+this.ConditionLineOptions.PathId);return(e=e.sort(((t,e)=>t.GetLabel().localeCompare(e.GetLabel())))).map((e=>t.html` <option data-type="${st.Field}" ?selected="${e.GetFieldId()==n}" data-field-id="${e.GetFieldId()}" data-path-id="" .value="${e.GetFieldId()}">${this.GetSpaces(i)}${e.GetLabel()+(""!=e.GetLabel().trim()?" ":"")}</option> ${s.rnIf(e.IsFieldContainer&&this.GetSelectOptions(this.GetFields(e),i+1))} `))}GetSpaces(e){let i=[];for(let n=0;n<e;n++)i.push(t.html`&nbsp;&nbsp;&nbsp;`);return i}async FieldChanged(e,i,n,o){if("CreateCustomField"==i){if(""==rednaoEmailDesigner.IsPr)return void r.Dialog.Show(t.html` <rn-license-required Message='This field is only available in the full version'></rn-license-required>`);{let t=this.model.Model.AddCustomField();await this.model.Model.FormulaBuilder.RenderDialog(null,t,(e=>{t.CompiledCode=e.Compiled,t.Code=e.Code})),e=st.CustomField,i=t.Id.toString(),n=""}this.forceUpdate()}let s;if(this.ConditionLineOptions.Value="",this.ConditionLineOptions.Comparison=nt.None,e==st.Field){let t=this.ConditionGroup.ConditionBuilder.EmailBuilder.GetFieldById(i);if(null==t)return;s=t.GetType()}this.ConditionLineOptions.FieldId=i,this.ConditionLineOptions.PathId=n,this.ConditionLineOptions.Comparison=nt.None,this.ConditionLineOptions.Type=e,this.ConditionLineOptions.SubType=s,this.FireEvent("fieldchanged",null,!0),this.forceUpdate()}GetFields(t){return t.Fields}})||bt;exports.ConditionBuilderModel=class{constructor(){this._roles=null,this._userNonce=""}render(e,i,n=null,o=null){return this.Model=e,t.html` <rn-condition-builder @AllGroupsRemoved=${t=>null!=n&&n()} .model="${this}" .EmailBuilder="${e}" .Condition="${i}" .FieldToHide=${o} ></rn-condition-builder> `}},exports.ConditionGroup=q,exports.ConditionLine=It,exports.ConditionGroupBase=class{GetOptionById(t){return this.GetOptions().find((e=>e.Id==t))}},exports.ConditionBaseOptions=R,exports.SubTypeEnum=G}));
