rndefine('#RNEmailHTMLGenerator', ['exports', '#RNEmailCore/EventManager'], function (exports, EventManager) { 'use strict';

   class HTMLGenerator {
     constructor(FormBuilder, Options = {}) {
       this.FormBuilder = FormBuilder;
       this.Options = Options;
     }

     ParseContent(parentContainer, content, fieldsUsed = []) {
       var _this$FormBuilder;

       if (content == null) return null;

       for (let currentContent of content) {
         switch (currentContent.type) {
           case 'paragraph':
             let p = this.CreateAndAppend(parentContainer, 'p');
             this.ParseContent(p, currentContent.content, fieldsUsed);
             break;

           case 'text':
             this.ParseText(parentContainer, currentContent);
             break;

           case 'horizontal_rule':
             this.CreateAndAppend(parentContainer, 'hr');
             break;

           case 'heading':
             let level = currentContent.attrs.level;
             let heading = this.CreateAndAppend(parentContainer, 'h' + level);
             this.ParseContent(heading, currentContent.content, fieldsUsed);
             break;

           case 'blockquote':
             let blockQuote = this.CreateAndAppend(parentContainer, 'blockQuote');
             this.ParseContent(blockQuote, currentContent.content, fieldsUsed);
             break;

           case 'bullet_list':
             let list = this.CreateAndAppend(parentContainer, 'ul');
             this.ParseContent(list, currentContent.content, fieldsUsed);
             break;

           case 'ordered_list':
             let olist = this.CreateAndAppend(parentContainer, 'ol');
             this.ParseContent(olist, currentContent.content, fieldsUsed);
             break;

           case 'list_item':
             let listItem = this.CreateAndAppend(parentContainer, 'li');
             this.ParseContent(listItem, currentContent.content, fieldsUsed);
             break;

           case 'table':
             let table = this.CreateAndAppend(parentContainer, 'table');
             let tbody = this.CreateAndAppend(table, 'tbody');
             this.ParseContent(tbody, currentContent.content, fieldsUsed);
             break;

           case 'table_row':
             let tableRow = this.CreateAndAppend(parentContainer, 'tr');
             this.ParseContent(tableRow, currentContent.content, fieldsUsed);
             break;

           case 'table_cell':
             let tableCell = this.CreateAndAppend(parentContainer, 'td');
             this.ParseContent(tableCell, currentContent.content, fieldsUsed);
             break;

           case 'field':
             let {
               id,
               type,
               options
             } = currentContent.attrs;
             let field = (_this$FormBuilder = this.FormBuilder) === null || _this$FormBuilder === void 0 ? void 0 : _this$FormBuilder.GetFieldById(id);
             if (field != null) if (fieldsUsed.indexOf(field) < 0) fieldsUsed.push(field);
             let label = '';
             if (this.Options.FieldFormatter != null) label = this.Options.FieldFormatter(field);else if (field != null) label = field.ToText();
             let span = document.createElement('span');
             span.innerText = label;
             if (currentContent.marks != null) span = this.ApplyMarks(span, currentContent.marks);
             parentContainer.appendChild(span);
             break;

           default:
             if (this.Options.NodeFormatter != null) {
               let node = this.Options.NodeFormatter(currentContent);

               if (node != null) {
                 parentContainer.appendChild(node);
               }

               continue;
             }

             console.error('Unknown type ', currentContent);
         }
       }

       return {
         Code: parentContainer,
         Fields: fieldsUsed
       };
     }

     CreateAndAppend(parent, tagName) {
       let element = document.createElement(tagName);
       parent.appendChild(element);
       return element;
     }

     ParseText(parentContainer, currentContent) {
       if (currentContent.marks == null || currentContent.marks.length == 0) {
         let text = document.createTextNode(currentContent.text);
         parentContainer.appendChild(text);
         return;
       }

       let span = document.createElement('span');
       span.innerText = currentContent.text;
       span = this.ApplyMarks(span, currentContent.marks);
       parentContainer.appendChild(span);
     }

     ApplyMarks(element, marks) {
       for (let currentMark of marks) {
         switch (currentMark.type) {
           case 'strong':
             element.style.fontWeight = 'bold';
             break;

           case 'em':
             element.style.fontStyle = 'italic';
             break;

           case 'link':
             let a = document.createElement('a');
             a.href = currentMark.attrs.href;
             a.target = currentMark.attrs.target;
             a.appendChild(element);
             element = a;
             break;

           case 'color':
             element.style.color = currentMark.attrs.color;
             break;

           default:
             console.error('Undefined mark', currentMark);
         }
       }

       return element;
     }

   }
   EventManager.EventManager.Subscribe('GetHTML', args => {
     var _args$Options, _args$HTML;

     let htmlGenerator = new HTMLGenerator(args.FormBuilder, (_args$Options = args.Options) !== null && _args$Options !== void 0 ? _args$Options : {});
     let div = document.createElement('div');
     div.classList.add('rnHTML');
     return htmlGenerator.ParseContent(div, (_args$HTML = args.HTML) === null || _args$HTML === void 0 ? void 0 : _args$HTML.content);
   });

   exports.HTMLGenerator = HTMLGenerator;

   Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
